// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  password      String?
  googleId      String?   @unique
  picture       String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  campaigns     Campaign[]
  segments      Segment[]
  phone         String?
  role          String    @default("user")

  company              Company?
  notificationPreferences NotificationPreferences?
  orders               Order[]
  customers            Customer[]
}

model Segment {
  id           String      @id @default(uuid())
  name         String
  rules        Json
  audienceSize Int
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  campaigns    Campaign[]
  customers    Customer[]  @relation("CustomerToSegment")
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Campaign {
  id          String    @id @default(cuid())
  name        String
  message     String
  status      String    // DRAFT, SENDING, COMPLETED, FAILED
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  createdBy   User      @relation(fields: [userId], references: [id])
  userId      String
  segment     Segment   @relation(fields: [segmentId], references: [id])
  segmentId   String
  logs        CommunicationLog[]
}

model Customer {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  postalCode    String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  orders        Order[]
  segments      Segment[] @relation("CustomerToSegment")
  communicationLogs CommunicationLog[]
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

model Order {
  id          String   @id @default(uuid())
  orderNumber String   @unique
  customerId  String
  status      String
  total       Float
  items       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  customer    Customer @relation(fields: [customerId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  userId      String
}

model CommunicationLog {
  id          String    @id @default(cuid())
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  String
  customer    Customer  @relation(fields: [customerId], references: [id])
  customerId  String
  status      String    // SENT, FAILED, DELIVERED
  sentAt      DateTime?
  deliveredAt DateTime?
  error       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Company {
  id        String   @id @default(uuid())
  userId    String   @unique
  name      String
  size      String?
  industry  String?
  address   String?
  website   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationPreferences {
  id                String   @id @default(uuid())
  userId           String   @unique
  emailNotifications Boolean  @default(true)
  orderUpdates     Boolean  @default(true)
  marketingEmails  Boolean  @default(true)
  securityAlerts   Boolean  @default(true)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
} 